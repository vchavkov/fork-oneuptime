version: '3.8'

x-common-variables: &common-variables
  ALLOWED_ACTIVE_MONITOR_COUNT_IN_FREE_PLAN: ${ALLOWED_ACTIVE_MONITOR_COUNT_IN_FREE_PLAN}
  ANALYTICS_HOST: ${ANALYTICS_HOST}
  ANALYTICS_KEY: ${ANALYTICS_KEY}
  APP_PORT: ${APP_PORT}
  ADMIN_DASHBOARD_PORT: ${ADMIN_DASHBOARD_PORT}
  ACCOUNTS_PORT: ${ACCOUNTS_PORT}
  API_REFERENCE_PORT: ${API_REFERENCE_PORT}
  BILLING_ENABLED: ${BILLING_ENABLED}
  BILLING_PUBLIC_KEY: ${BILLING_PUBLIC_KEY}
  DASHBOARD_PORT: ${DASHBOARD_PORT}
  DOCS_PORT: ${DOCS_PORT}
  FLUENTD_HOST: ${FLUENTD_HOST}
  HOME_PORT: ${HOME_PORT}
  HOST: ${HOST}
  HTTP_PROTOCOL: ${HTTP_PROTOCOL}
  INGESTOR_PORT: ${INGESTOR_PORT}
  ISOLATED_VM_PORT: ${ISOLATED_VM_PORT}
  LOG_LEVEL: ${LOG_LEVEL}
  NODE_ENV: ${ENVIRONMENT}
  OPENTELEMETRY_EXPORTER_OTLP_ENDPOINT: ${OPENTELEMETRY_EXPORTER_OTLP_ENDPOINT}
  OPENTELEMETRY_EXPORTER_OTLP_HEADERS: ${OPENTELEMETRY_EXPORTER_OTLP_HEADERS}
  OTEL_COLLECTOR_HOST: ${OTEL_COLLECTOR_HOST}
  PROBE_PORT: ${PROBE_PORT}
  SERVER_ACCOUNTS_HOSTNAME: accounts
  SERVER_ADMIN_DASHBOARD_HOSTNAME: admin-dashboard
  SERVER_ALERT_HOSTNAME: alert
  SERVER_API_REFERENCE_HOSTNAME: api-reference
  SERVER_APP_HOSTNAME: app
  SERVER_DASHBOARD_HOSTNAME: dashboard
  SERVER_DOCS_HOSTNAME: docs
  SERVER_HOME_HOSTNAME: home
  SERVER_INGESTOR_HOSTNAME: ingestor
  SERVER_ISOLATED_VM_HOSTNAME: isolated-vm
  SERVER_OTEL_COLLECTOR_HOSTNAME: otel-collector
  SERVER_STATUS_PAGE_HOSTNAME: status-page
  SERVER_TEST_SERVER_HOSTNAME: test-server
  SERVER_WORKER_HOSTNAME: worker
  SERVER_WORKFLOW_HOSTNAME: workflow
  STATUS_PAGE_CNAME_RECORD: ${STATUS_PAGE_CNAME_RECORD}
  STATUS_PAGE_PORT: ${STATUS_PAGE_PORT}
  SUBSCRIPTION_PLAN_BASIC: ${SUBSCRIPTION_PLAN_BASIC}
  SUBSCRIPTION_PLAN_ENTERPRISE: ${SUBSCRIPTION_PLAN_ENTERPRISE}
  SUBSCRIPTION_PLAN_GROWTH: ${SUBSCRIPTION_PLAN_GROWTH}
  SUBSCRIPTION_PLAN_SCALE: ${SUBSCRIPTION_PLAN_SCALE}
  TEST_SERVER_PORT: ${TEST_SERVER_PORT}
  WORKER_PORT: ${WORKER_PORT}
  WORKFLOW_PORT: ${WORKFLOW_PORT}

x-common-ui-variables: &common-ui-variables
  <<: *common-variables
  IS_SERVER: "false"

x-common-server-variables: &common-server-variables
  <<: *common-variables
  BILLING_ENABLED: ${BILLING_ENABLED}
  BILLING_PRIVATE_KEY: ${BILLING_PRIVATE_KEY}
  BILLING_PUBLIC_KEY: ${BILLING_PUBLIC_KEY}
  CLICKHOUSE_DATABASE: ${CLICKHOUSE_DATABASE}
  CLICKHOUSE_HOST: ${CLICKHOUSE_HOST}
  CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
  CLICKHOUSE_PORT: ${CLICKHOUSE_PORT}
  CLICKHOUSE_USER: ${CLICKHOUSE_USER}
  DATABASE_HOST: ${DATABASE_HOST}
  DATABASE_NAME: ${DATABASE_NAME}
  DATABASE_PASSWORD: ${DATABASE_PASSWORD}
  DATABASE_PORT: ${DATABASE_PORT}
  DATABASE_SSL_CA: ${DATABASE_SSL_CA}
  DATABASE_SSL_CERT: ${DATABASE_SSL_CERT}
  DATABASE_SSL_KEY: ${DATABASE_SSL_KEY}
  DATABASE_SSL_REJECT_UNAUTHORIZED: ${DATABASE_SSL_REJECT_UNAUTHORIZED}
  DATABASE_USERNAME: ${DATABASE_USERNAME}
  DISABLE_AUTOMATIC_INCIDENT_CREATION: ${DISABLE_AUTOMATIC_INCIDENT_CREATION}
  ENCRYPTION_SECRET: ${ENCRYPTION_SECRET}
  IS_SERVER: "true"
  LETS_ENCRYPT_ACCOUNT_KEY: ${LETS_ENCRYPT_ACCOUNT_KEY}
  LETS_ENCRYPT_NOTIFICATION_EMAIL: ${LETS_ENCRYPT_NOTIFICATION_EMAIL}
  NOTIFICATION_WEBHOOK_ON_CREATED_USER: ${NOTIFICATION_WEBHOOK_ON_CREATED_USER}
  ONEUPTIME_SECRET: ${ONEUPTIME_SECRET}
  REDIS_DB: ${REDIS_DB}
  REDIS_HOST: ${REDIS_HOST}
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_PORT: ${REDIS_PORT}
  REDIS_TLS_CA: ${REDIS_TLS_CA}
  REDIS_TLS_SENTINEL_MODE: ${REDIS_TLS_SENTINEL_MODE}
  REDIS_USERNAME: ${REDIS_USERNAME}
  WORKFLOW_SCRIPT_TIMEOUT_IN_MS: ${WORKFLOW_SCRIPT_TIMEOUT_IN_MS}

services:
  accounts:
    environment:
      <<: *common-ui-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_ACCOUNTS}
      PORT: ${ACCOUNTS_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  admin-dashboard:
    environment:
      <<: *common-ui-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_ADMIN_DASHBOARD}
      PORT: ${ADMIN_DASHBOARD_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  api-reference:
    environment:
      <<: *common-server-variables
      PORT: ${API_REFERENCE_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  app:
    environment:
      <<: *common-server-variables
      CALL_DEFAULT_COST_IN_CENTS_PER_MINUTE: ${CALL_DEFAULT_COST_IN_CENTS_PER_MINUTE}
      CALL_HIGH_RISK_COST_IN_CENTS_PER_MINUTE: ${CALL_HIGH_RISK_COST_IN_CENTS_PER_MINUTE}
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_APP}
      INTERNAL_SMTP_EMAIL: ${INTERNAL_SMTP_EMAIL}
      INTERNAL_SMTP_FROM_NAME: ${INTERNAL_SMTP_FROM_NAME}
      INTERNAL_SMTP_PASSWORD: ${INTERNAL_SMTP_PASSWORD}
      PORT: ${APP_PORT}
      SMS_DEFAULT_COST_IN_CENTS: ${SMS_DEFAULT_COST_IN_CENTS}
      SMS_HIGH_RISK_COST_IN_CENTS: ${SMS_HIGH_RISK_COST_IN_CENTS}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  clickhouse:
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DATABASE}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
    image: 401376717990.dkr.ecr.us-east-1.amazonaws.com/docker-hub/clickhouse/clickhouse-server:23.7
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always
    volumes:
      - clickhouse:/var/lib/clickhouse/

  copilot:
    environment:
      CODE_REPOSITORY_PASSWORD: ${COPILOT_CODE_REPOSITORY_PASSWORD}
      CODE_REPOSITORY_USERNAME: ${COPILOT_CODE_REPOSITORY_USERNAME}
      DISABLE_COPILOT: ${DISABLE_COPILOT}
      LOG_LEVEL: ${LOG_LEVEL}
      ONEUPTIME_LLM_SERVER_URL: ${COPILOT_ONEUPTIME_LLM_SERVER_URL}
      ONEUPTIME_REPOSITORY_SECRET_KEY: ${COPILOT_ONEUPTIME_REPOSITORY_SECRET_KEY}
      ONEUPTIME_URL: ${COPILOT_ONEUPTIME_URL}
      OPENAI_API_KEY: ${COPILOT_OPENAI_API_KEY}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  dashboard:
    environment:
      <<: *common-ui-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_DASHBOARD}
      PORT: ${DASHBOARD_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  docs:
    environment:
      <<: *common-server-variables
      PORT: ${DOCS_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  e2e:
    environment:
      <<: *common-variables
      E2E_TEST_IS_USER_REGISTERED: ${E2E_TEST_IS_USER_REGISTERED}
      E2E_TEST_REGISTERED_USER_EMAIL: ${E2E_TEST_REGISTERED_USER_EMAIL}
      E2E_TEST_REGISTERED_USER_PASSWORD: ${E2E_TEST_REGISTERED_USER_PASSWORD}
      E2E_TEST_STATUS_PAGE_URL: ${E2E_TEST_STATUS_PAGE_URL}
      E2E_TESTS_FAILED_WEBHOOK_URL: ${E2E_TESTS_FAILED_WEBHOOK_URL}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    network_mode: host
    restart: "no"

  fluentd:
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  haraka:
    environment:
      DKIM_PRIVATE_KEY: ${INTERNAL_SMTP_DKIM_PRIVATE_KEY_AS_BASE64}
      DKIM_PUBLIC_KEY: ${INTERNAL_SMTP_DKIM_PUBLIC_KEY_AS_BASE64}
      DKIM_SELECTOR: oneuptime
      DOMAIN: ${INTERNAL_SMTP_SENDING_DOMAIN}
      SMTP_EMAIL: ${INTERNAL_SMTP_EMAIL}
      SMTP_PASSWORD: ${INTERNAL_SMTP_PASSWORD}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  home:
    environment:
      <<: *common-server-variables
      PORT: ${HOME_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  ingestor:
    environment:
      <<: *common-server-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_INGESTOR}
      PORT: ${INGESTOR_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  isolated-vm:
    environment:
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_ISOLATED_VM}
      ONEUPTIME_SECRET: ${ONEUPTIME_SECRET}
      PORT: ${ISOLATED_VM_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  llm:
    environment:
      <<: *common-server-variables
      HF_MODEL_NAME: ${LLM_SERVER_HUGGINGFACE_MODEL_NAME}
      HF_TOKEN: ${LLM_SERVER_HUGGINGFACE_TOKEN}
      PORT: 8547
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always
    volumes:
      - ./LLM/Models:/app/Models

  monitor:
    environment:
      <<: *common-server-variables
      PORT: 3010
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  nginx:
    environment:
      <<: *common-server-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_INGRESS}
      ONEUPTIME_HTTP_PORT: ${ONEUPTIME_HTTP_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    ports:
      - '${ONEUPTIME_HTTP_PORT}:7849'
      - '${STATUS_PAGE_HTTPS_PORT}:7850'
    restart: always

  otel-collector:
    environment:
      <<: *common-variables
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  postgres:
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USERNAME}
    image: 401376717990.dkr.ecr.us-east-1.amazonaws.com/docker-hub/library/postgres:15
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data

  probe-1:
    environment:
      <<: *common-server-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_PROBE}
      ONEUPTIME_URL: ${GLOBAL_PROBE_1_ONEUPTIME_URL}
      PORT: ${PROBE_PORT}
      PROBE_CUSTOM_CODE_MONITOR_SCRIPT_TIMEOUT_IN_MS: ${GLOBAL_PROBE_1_CUSTOM_CODE_MONITOR_SCRIPT_TIMEOUT_IN_MS}
      PROBE_DESCRIPTION: ${GLOBAL_PROBE_1_DESCRIPTION}
      PROBE_KEY: ${GLOBAL_PROBE_1_KEY}
      PROBE_MONITOR_FETCH_LIMIT: ${GLOBAL_PROBE_1_MONITOR_FETCH_LIMIT}
      PROBE_MONITORING_WORKERS: ${GLOBAL_PROBE_1_MONITORING_WORKERS}
      PROBE_NAME: ${GLOBAL_PROBE_1_NAME}
      PROBE_SYNTHETIC_MONITOR_SCRIPT_TIMEOUT_IN_MS: ${GLOBAL_PROBE_1_SYNTHETIC_MONITOR_SCRIPT_TIMEOUT_IN_MS}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  probe-2:
    environment:
      <<: *common-server-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_PROBE}
      ONEUPTIME_URL: ${GLOBAL_PROBE_2_ONEUPTIME_URL}
      PORT: ${PROBE_PORT}
      PROBE_CUSTOM_CODE_MONITOR_SCRIPT_TIMEOUT_IN_MS: ${GLOBAL_PROBE_2_CUSTOM_CODE_MONITOR_SCRIPT_TIMEOUT_IN_MS}
      PROBE_DESCRIPTION: ${GLOBAL_PROBE_2_DESCRIPTION}
      PROBE_KEY: ${GLOBAL_PROBE_2_KEY}
      PROBE_MONITOR_FETCH_LIMIT: ${GLOBAL_PROBE_2_MONITOR_FETCH_LIMIT}
      PROBE_MONITORING_WORKERS: ${GLOBAL_PROBE_2_MONITORING_WORKERS}
      PROBE_NAME: ${GLOBAL_PROBE_2_NAME}
      PROBE_SYNTHETIC_MONITOR_SCRIPT_TIMEOUT_IN_MS: ${GLOBAL_PROBE_2_SYNTHETIC_MONITOR_SCRIPT_TIMEOUT_IN_MS}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  redis:
    command: redis-server --requirepass "${REDIS_PASSWORD}" --save "" --appendonly no
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    image: 401376717990.dkr.ecr.us-east-1.amazonaws.com/docker-hub/library/redis:7.0.12
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  status-page:
    environment:
      <<: *common-ui-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_STATUS_PAGE}
      PORT: ${STATUS_PAGE_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  test-server:
    environment:
      <<: *common-server-variables
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY_FOR_TEST_SERVER}
      PORT: ${TEST_SERVER_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  worker:
    environment:
      <<: *common-server-variables
      PORT: ${WORKER_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

  workflow:
    environment:
      <<: *common-server-variables
      PORT: ${WORKFLOW_PORT}
    logging:
      driver: "local"
      options:
        max-size: "1000m"
    networks:
      - uptime
    restart: always

networks:
  uptime:
    driver: bridge

volumes:
  clickhouse:
  postgres:
